name: Blog Content Pipeline

on:
  # Only run on manual trigger with a special input parameter
  workflow_dispatch:
    inputs:
      source_commit:
        description: 'Source commit ID'
        required: false
        default: ''
      source_branch:
        description: 'Source branch'
        required: false
        default: 'main'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "content-pipeline"
  cancel-in-progress: false

jobs:
  process-and-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.source_branch || 'main' }}
      
      - name: Verify content directory structure
        run: |
          # Print workspace and content directories
          echo "Workspace directory: $GITHUB_WORKSPACE"
          ls -la
          
          # Verify content directories exist
          mkdir -p content/_incoming content/posts content/_processed content/_error
          
          # List all content directories
          echo "Content directories:"
          ls -la content/
          
          # Show files in _incoming
          echo "Files in _incoming:"
          ls -la content/_incoming/ || echo "No files or directory doesn't exist"
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm install gray-matter
          npm list || true
          # Install jq for JSON handling
          sudo apt-get update && sudo apt-get install -y jq
      
      - name: Collect incoming content metadata
        id: collect_metadata
        run: |
          # Check if there are any files to process
          if [ -z "$(ls -A content/_incoming/*.md 2>/dev/null)" ]; then
            echo "No markdown files found in _incoming directory"
            echo "has_incoming_files=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has_incoming_files=true" >> $GITHUB_OUTPUT
          
          # Create temp file for JSON
          TEMP_FILE=$(mktemp)
          
          echo "[" > $TEMP_FILE
          FIRST=true
          
          # Process each incoming file
          for FILE in content/_incoming/*.md; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> $TEMP_FILE
            fi
            
            # Extract title - safely escape special characters
            TITLE=$(head -n 5 "$FILE" | grep -i "title:" | sed 's/title://i' | tr -d '"' | xargs)
            if [ -z "$TITLE" ]; then
              TITLE=$(basename "$FILE" .md)
            fi
            
            FILENAME=$(basename "$FILE")
            CREATED=$(date -I)
            
            # Extract preview text (safer method)
            PREVIEW=$(sed -n '1,10p' "$FILE" | grep -v "^---" | grep -v "^title:" | head -n 3 | tr '\n' ' ' | cut -c 1-100 | sed 's/"/\\"/g')
            
            # Write JSON object with proper escaping
            echo "{" >> $TEMP_FILE
            echo "  \"title\": \"${TITLE}\"," >> $TEMP_FILE
            echo "  \"filename\": \"${FILENAME}\"," >> $TEMP_FILE
            echo "  \"created\": \"${CREATED}\"," >> $TEMP_FILE
            echo "  \"preview\": \"${PREVIEW}\"" >> $TEMP_FILE
            echo "}" >> $TEMP_FILE
          done
          
          echo "]" >> $TEMP_FILE
          
          # Validate JSON
          if ! jq '.' $TEMP_FILE > /dev/null 2>&1; then
            echo "Warning: Generated JSON is invalid, using simplified version"
            echo "[]" > $TEMP_FILE
          fi
          
          # Base64 encode the JSON to avoid environment variable issues
          ENCODED_JSON=$(base64 -w 0 $TEMP_FILE)
          echo "posts_json_b64=$ENCODED_JSON" >> $GITHUB_OUTPUT
          
          echo "Metadata collected for incoming posts"
          cat $TEMP_FILE | jq '.'
      
      - name: Debug script
        run: |
          cat scripts/process-incoming.js || echo "Script file not found"
      
      - name: Process incoming content
        id: process_content
        run: |
          echo "Running content processing script..."
          node scripts/process-incoming.js
          EXIT_CODE=$?
          echo "Script exit code: $EXIT_CODE"
          
          # Count files in relevant directories
          INCOMING_COUNT=$(ls -1 content/_incoming/ 2>/dev/null | wc -l)
          POSTS_COUNT=$(ls -1 content/posts/ 2>/dev/null | wc -l)
          PROCESSED_COUNT=$(ls -1 content/_processed/ 2>/dev/null | wc -l)
          ERROR_COUNT=$(ls -1 content/_error/ 2>/dev/null | wc -l)
          
          echo "Files in _incoming: $INCOMING_COUNT"
          echo "Files in posts: $POSTS_COUNT"
          echo "Files in _processed: $PROCESSED_COUNT"
          echo "Files in _error: $ERROR_COUNT"
          
          # Set outputs for later steps
          echo "has_changes=false" >> $GITHUB_OUTPUT
          if [ "$PROCESSED_COUNT" -gt 0 ] || [ "$ERROR_COUNT" -gt 0 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Commit processed files
        id: commit
        if: steps.process_content.outputs.has_changes == 'true'
        run: |
          # Check if we have any changes to commit
          git add content/posts/ content/_processed/ content/_error/
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Process incoming content [workflow]"
            git push
            echo "changes_made=true" >> $GITHUB_OUTPUT
            echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack deployment approval request
        if: steps.commit.outputs.changes_made == 'true'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "âœ… Content processed successfully!"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repo:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ steps.commit.outputs.commit_sha }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Content has been processed and is ready to deploy. Would you like to deploy it now?"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "Deploy Now"
                      },
                      "style": "primary",
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/workflows/deploy.yml/dispatch"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      
      - name: Send Slack notification (No changes or error)
        if: steps.commit.outputs.changes_made != 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: 'No content changes to process! :memo:'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 