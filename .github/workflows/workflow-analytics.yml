name: Workflow Analytics Dashboard

on:
  # Run manually
  workflow_dispatch:
  # Run every Sunday at midnight
  schedule:
    - cron: '0 0 * * 0'

jobs:
  analyze-workflows:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install @octokit/rest @octokit/plugin-retry @actions/core
        
      - name: Create required labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Create workflow-dashboard label if it doesn't exist
          gh label create workflow-dashboard --color 0366d6 --description "Workflow analytics dashboard" --force
          gh label create documentation --color 0075ca --description "Documentation related" --force
          gh label create automated --color d876e3 --description "Automated process" --force
        
      - name: Create analyze script
        run: |
          cat > analyze.mjs << 'EOL'
          import { Octokit } from '@octokit/rest';
          import { retry } from '@octokit/plugin-retry';
          import fs from 'fs';
          import * as core from '@actions/core';
          
          const RetryOctokit = Octokit.plugin(retry);
          const octokit = new RetryOctokit({
            auth: process.env.GH_TOKEN,
            request: { retries: 3 }
          });
          
          const owner = process.env.REPO_OWNER;
          const repo = process.env.REPO_NAME;
          
          console.log(`Starting workflow analysis for ${owner}/${repo}`);
          
          async function getWorkflows() {
            try {
              const { data } = await octokit.actions.listRepoWorkflows({
                owner,
                repo
              });
              return data.workflows.filter(wf => !wf.name.includes('Analytics'));
            } catch (error) {
              console.error('Error getting workflows:', error.message);
              return [];
            }
          }
          
          async function getWorkflowRuns(workflow_id, limit = 10) {
            try {
              const { data } = await octokit.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id,
                per_page: limit
              });
              return data.workflow_runs;
            } catch (error) {
              console.error(`Error getting runs for workflow ${workflow_id}:`, error.message);
              return [];
            }
          }
          
          function formatDuration(ms) {
            if (!ms || isNaN(ms)) return 'N/A';
            const seconds = Math.floor(ms / 1000);
            const minutes = Math.floor(seconds / 60);
            const hours = Math.floor(minutes / 60);
            return hours > 0 
              ? `${hours}h ${minutes % 60}m ${seconds % 60}s`
              : minutes > 0
                ? `${minutes}m ${seconds % 60}s`
                : `${seconds}s`;
          }
          
          async function analyzeWorkflows() {
            const workflows = await getWorkflows();
            console.log(`Found ${workflows.length} workflows`);
            
            let dashboardContent = `# 📊 Workflow Analytics Dashboard\n\n`;
            dashboardContent += `## Summary of Recent Workflow Runs\n\n`;
            dashboardContent += `Last updated: ${new Date().toISOString().split('T')[0]}\n\n`;
            
            const overallStats = {
              total: 0,
              successful: 0,
              failed: 0,
              totalDuration: 0,
              validDurationCount: 0
            };
            
            for (const workflow of workflows) {
              console.log(`Processing workflow: ${workflow.name} (${workflow.id})`);
              const runs = await getWorkflowRuns(workflow.id, 5);
              if (!runs || runs.length === 0) {
                console.log(`No runs found for workflow: ${workflow.name}`);
                continue;
              }
              
              console.log(`Found ${runs.length} runs for workflow: ${workflow.name}`);
              
              dashboardContent += `### ${workflow.name}\n\n`;
              dashboardContent += `| Run | Status | Started | Duration | Trigger |\n`;
              dashboardContent += `| --- | ------ | ------- | -------- | ------- |\n`;
              
              const workflowStats = {
                total: runs.length,
                successful: 0,
                failed: 0,
                totalDuration: 0,
                validDurationCount: 0
              };
              
              for (const run of runs) {
                console.log(`Processing run #${run.run_number}:`, JSON.stringify(run, null, 2).substring(0, 500) + '...');
                
                const status = run.conclusion || run.status || 'unknown';
                const statusEmoji = 
                  status === 'success' ? '✅' :
                  status === 'failure' ? '❌' :
                  status === 'cancelled' ? '⚠️' : '⏳';
                
                if (status === 'success') workflowStats.successful++;
                if (status === 'failure') workflowStats.failed++;
                
                const startedAt = run.created_at ? new Date(run.created_at) : new Date();
                const completedAt = run.completed_at ? new Date(run.completed_at) : null;
                
                let duration = null;
                if (completedAt && startedAt) {
                  duration = completedAt - startedAt;
                  if (!isNaN(duration) && duration > 0) {
                    workflowStats.totalDuration += duration;
                    workflowStats.validDurationCount++;
                    
                    overallStats.totalDuration += duration;
                    overallStats.validDurationCount++;
                  } else {
                    console.log(`Invalid duration for run #${run.run_number}: ${duration}`);
                  }
                }
                
                const trigger = run.event || 'unknown';
                
                dashboardContent += `| [#${run.run_number}](${run.html_url || '#'}) | ${statusEmoji} ${status} | ${startedAt.toISOString().split('T')[0]} | ${formatDuration(duration)} | ${trigger} |\n`;
              }
              
              overallStats.total += workflowStats.total;
              overallStats.successful += workflowStats.successful;
              overallStats.failed += workflowStats.failed;
              
              const avgDuration = workflowStats.validDurationCount > 0 
                ? workflowStats.totalDuration / workflowStats.validDurationCount 
                : null;
              
              const successRate = workflowStats.total > 0 
                ? (workflowStats.successful / workflowStats.total * 100).toFixed(0) 
                : 0;
              
              dashboardContent += `\n**Success Rate:** ${successRate}% | **Avg. Duration:** ${formatDuration(avgDuration)}\n\n`;
            }
            
            // Overall statistics
            const overallSuccessRate = overallStats.total > 0 
              ? (overallStats.successful / overallStats.total * 100).toFixed(0) 
              : 0;
            
            const overallAvgDuration = overallStats.validDurationCount > 0 
              ? overallStats.totalDuration / overallStats.validDurationCount 
              : null;
            
            dashboardContent += `## Overall Statistics\n\n`;
            dashboardContent += `- **Total Runs Analyzed:** ${overallStats.total}\n`;
            dashboardContent += `- **Success Rate:** ${overallSuccessRate}%\n`;
            dashboardContent += `- **Average Duration:** ${formatDuration(overallAvgDuration)}\n`;
            dashboardContent += `- **Failed Runs:** ${overallStats.failed}\n\n`;
            
            dashboardContent += `## 🔍 Recommendations\n\n`;
            
            if (overallStats.failed > 0) {
              dashboardContent += `- Review failed workflow runs to identify and fix issues\n`;
            }
            
            if (overallAvgDuration > 5 * 60 * 1000) { // If avg duration > 5 min
              dashboardContent += `- Consider optimizing workflows for faster execution times\n`;
            }
            
            dashboardContent += `- Consider caching dependencies and build artifacts to speed up workflows\n`;
            dashboardContent += `- Use concurrency controls to prevent unnecessary concurrent runs\n`;
            
            console.log('Analysis complete');
            
            // Use GitHub Actions Core library to set output instead of writing to file
            core.setOutput('dashboard_content', dashboardContent);
            
            // Also write to file as backup method
            try {
              fs.writeFileSync('dashboard_content.txt', dashboardContent);
              console.log('Dashboard content written to file successfully');
            } catch (error) {
              console.error('Error writing dashboard content to file:', error);
            }
          }
          
          analyzeWorkflows().catch(error => {
            console.error('Error during workflow analysis:', error);
            process.exit(1);
          });
          EOL
      
      - name: Run workflow analysis
        id: analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: node analyze.mjs
      
      - name: Read dashboard content from file if needed
        id: read_file
        if: ${{ steps.analysis.outputs.dashboard_content == '' || steps.analysis.outcome == 'failure' }}
        run: |
          if [ -f dashboard_content.txt ]; then
            echo "dashboard_content=$(cat dashboard_content.txt)" >> $GITHUB_OUTPUT
            echo "File content read successfully"
          else
            echo "dashboard_content=Workflow analysis failed. Please check the logs for details." >> $GITHUB_OUTPUT
          fi
      
      - name: Find existing dashboard issue
        id: find_issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          ISSUE_NUMBER=$(gh issue list --repo $REPO_OWNER/$REPO_NAME --label "workflow-dashboard" --json number --jq '.[0].number')
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
      
      - name: Create or update dashboard issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
          ISSUE_NUMBER: ${{ steps.find_issue.outputs.ISSUE_NUMBER }}
          DASHBOARD_CONTENT: ${{ steps.analysis.outputs.dashboard_content || steps.read_file.outputs.dashboard_content }}
        run: |
          if [ -z "$DASHBOARD_CONTENT" ]; then
            DASHBOARD_CONTENT="Workflow analysis failed to generate content. Please check the logs for details."
          fi
          
          if [ -z "$ISSUE_NUMBER" ]; then
            # Create new issue
            gh issue create --repo $REPO_OWNER/$REPO_NAME \
              --title "📊 Workflow Analytics Dashboard" \
              --body "$DASHBOARD_CONTENT" \
              --label "workflow-dashboard,documentation,automated"
            echo "Created new dashboard issue"
          else
            # Update existing issue
            gh issue edit $ISSUE_NUMBER --repo $REPO_OWNER/$REPO_NAME \
              --body "$DASHBOARD_CONTENT"
            echo "Updated existing dashboard issue #$ISSUE_NUMBER"
          fi 